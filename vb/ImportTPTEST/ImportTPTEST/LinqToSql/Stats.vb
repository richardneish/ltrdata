'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace LinqToSql
	
	Partial Public Class Stats
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertTptest(instance As Tptest)
    End Sub
    Partial Private Sub UpdateTptest(instance As Tptest)
    End Sub
    Partial Private Sub DeleteTptest(instance As Tptest)
    End Sub
#End Region
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Tptest() As System.Data.Linq.Table(Of Tptest)
			Get
				Return Me.GetTable(Of Tptest)
			End Get
		End Property
		
  End Class
	
	<Table(Name:="dbo.tptest")>  _
	Partial Public Class Tptest
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Log_time As Date
		
		Private _Udp_tx As System.Nullable(Of Double)
		
		Private _Udp_rx As System.Nullable(Of Double)
		
		Private _Tcp_tx As System.Nullable(Of Double)
		
		Private _Tcp_rx As System.Nullable(Of Double)
		
		Private _Comment As String
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLog_timeChanging(value As Date)
    End Sub
    Partial Private Sub OnLog_timeChanged()
    End Sub
    Partial Private Sub OnUdp_txChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnUdp_txChanged()
    End Sub
    Partial Private Sub OnUdp_rxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnUdp_rxChanged()
    End Sub
    Partial Private Sub OnTcp_txChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTcp_txChanged()
    End Sub
    Partial Private Sub OnTcp_rxChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTcp_rxChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			OnCreated
		End Sub
		
		<Column(Name:="log_time", Storage:="_Log_time", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Log_time() As Date
			Get
				Return Me._Log_time
			End Get
			Set
				If ((Me._Log_time = value)  _
							= false) Then
					Me.OnLog_timeChanging(value)
					Me.SendPropertyChanging
					Me._Log_time = value
					Me.SendPropertyChanged("Log_time")
					Me.OnLog_timeChanged
				End If
			End Set
		End Property
		
		<Column(Name:="udp_tx", Storage:="_Udp_tx", DbType:="Float")>  _
		Public Property Udp_tx() As System.Nullable(Of Double)
			Get
				Return Me._Udp_tx
			End Get
			Set
				If (Me._Udp_tx.Equals(value) = false) Then
					Me.OnUdp_txChanging(value)
					Me.SendPropertyChanging
					Me._Udp_tx = value
					Me.SendPropertyChanged("Udp_tx")
					Me.OnUdp_txChanged
				End If
			End Set
		End Property
		
		<Column(Name:="udp_rx", Storage:="_Udp_rx", DbType:="Float")>  _
		Public Property Udp_rx() As System.Nullable(Of Double)
			Get
				Return Me._Udp_rx
			End Get
			Set
				If (Me._Udp_rx.Equals(value) = false) Then
					Me.OnUdp_rxChanging(value)
					Me.SendPropertyChanging
					Me._Udp_rx = value
					Me.SendPropertyChanged("Udp_rx")
					Me.OnUdp_rxChanged
				End If
			End Set
		End Property
		
		<Column(Name:="tcp_tx", Storage:="_Tcp_tx", DbType:="Float")>  _
		Public Property Tcp_tx() As System.Nullable(Of Double)
			Get
				Return Me._Tcp_tx
			End Get
			Set
				If (Me._Tcp_tx.Equals(value) = false) Then
					Me.OnTcp_txChanging(value)
					Me.SendPropertyChanging
					Me._Tcp_tx = value
					Me.SendPropertyChanged("Tcp_tx")
					Me.OnTcp_txChanged
				End If
			End Set
		End Property
		
		<Column(Name:="tcp_rx", Storage:="_Tcp_rx", DbType:="Float")>  _
		Public Property Tcp_rx() As System.Nullable(Of Double)
			Get
				Return Me._Tcp_rx
			End Get
			Set
				If (Me._Tcp_rx.Equals(value) = false) Then
					Me.OnTcp_rxChanging(value)
					Me.SendPropertyChanging
					Me._Tcp_rx = value
					Me.SendPropertyChanged("Tcp_rx")
					Me.OnTcp_rxChanged
				End If
			End Set
		End Property
		
		<Column(Name:="comment", Storage:="_Comment", DbType:="Char(80)")>  _
		Public Property Comment() As String
			Get
				Return Me._Comment
			End Get
			Set
				If (String.Equals(Me._Comment, value) = false) Then
					Me.OnCommentChanging(value)
					Me.SendPropertyChanging
					Me._Comment = value
					Me.SendPropertyChanged("Comment")
					Me.OnCommentChanged
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
End Namespace
